# =============================================================================
# MEDICAL APPOINTMENTS API - ENVIRONMENT CONFIGURATION TEMPLATE
# =============================================================================
# 
# ðŸ“‹ SETUP INSTRUCTIONS:
# 1. Copy this file to create environment-specific configurations:
#    cp .env.example .env.dev      # For local development (LocalStack)
#    cp .env.example .env.staging  # For AWS staging environment
#    cp .env.example .env.prod     # For AWS production environment
#
# 2. Edit each file according to your environment needs
# 3. Environment files (.env.dev, .env.staging, .env.prod) are ignored by git
#
# =============================================================================

# =============================================================================
# STAGE & NODE ENVIRONMENT
# =============================================================================
STAGE=dev                    # dev, staging, prod
NODE_ENV=development         # development, production

# =============================================================================
# AWS CONFIGURATION
# =============================================================================
# For LocalStack (development):
AWS_ENDPOINT_URL=http://localhost:4566
AWS_ACCESS_KEY_ID=test
AWS_SECRET_ACCESS_KEY=test
AWS_ACCOUNT_ID=000000000000

# For AWS (production):
# Remove AWS_ENDPOINT_URL and credentials (use IAM roles)
AWS_DEFAULT_REGION=us-east-1

# =============================================================================
# PERFORMANCE TUNING
# =============================================================================
DEFAULT_MEMORY=256           # Lambda memory in MB (256-512 for prod)
DEFAULT_TIMEOUT=30           # Lambda timeout in seconds
SQS_VISIBILITY_TIMEOUT=360   # SQS visibility timeout (600 for prod)
SQS_MAX_RECEIVE=3           # Max receives before DLQ
API_RATE_LIMIT=100          # API throttling (1000 for prod)
API_BURST_LIMIT=200         # API burst limit (2000 for prod)

# =============================================================================
# DATABASE CONFIGURATION
# =============================================================================
# Peru MySQL Database
DB_HOST_PE=localhost         # For prod: your-rds-endpoint.rds.amazonaws.com
DB_PORT_PE=3307             # For prod: 3306
DB_NAME_PE=appointments_pe
DB_USER_PE=appointments     # For prod: admin user
DB_PASSWORD_PE=appointments123  # For prod: secure password

# Chile MySQL Database  
DB_HOST_CL=localhost
DB_PORT_CL=3308             # For prod: 3306
DB_NAME_CL=appointments_cl
DB_USER_CL=appointments
DB_PASSWORD_CL=appointments123

# =============================================================================
# LOGGING
# =============================================================================
LOG_LEVEL=debug             # debug, info, warn, error

# =============================================================================
# ENVIRONMENT-SPECIFIC CONFIGURATIONS
# =============================================================================
#
# ðŸ”§ FOR .env.dev (Local Development with LocalStack):
# - Keep STAGE=dev, NODE_ENV=development
# - Keep AWS_ENDPOINT_URL=http://localhost:4566
# - Keep all LocalStack settings as they are
# - Keep DB ports as 3307, 3308 for local containers
# - Keep LOG_LEVEL=debug
#
# ðŸ§ª FOR .env.staging (AWS Staging):
# - Change STAGE=staging, NODE_ENV=production
# - Remove AWS_ENDPOINT_URL and test credentials
# - Set DEFAULT_MEMORY=384, API_RATE_LIMIT=500, API_BURST_LIMIT=1000
# - Update DB hosts to your staging RDS endpoints
# - Set LOG_LEVEL=info
# - Add DB_SECRET_ARN_PE= and DB_SECRET_ARN_CL= (empty for this challenge)
#
# ðŸš€ FOR .env.prod (AWS Production):
# - Change STAGE=prod, NODE_ENV=production  
# - Remove AWS_ENDPOINT_URL and test credentials
# - Set DEFAULT_MEMORY=512, API_RATE_LIMIT=2000, API_BURST_LIMIT=5000
# - Update DB hosts to your production RDS endpoints
# - Set LOG_LEVEL=warn
# - Add DB_SECRET_ARN_PE= and DB_SECRET_ARN_CL= (empty for this challenge)
#
# =============================================================================
# NOTES
# =============================================================================
# 1. Serverless Framework v4 automatically loads:
#    - .env.{stage} files based on --stage parameter
#    - .env as fallback for missing values
#
# 2. AWS resources (SNS, SQS, DynamoDB) are auto-created by CloudFormation
#    No need to specify ARNs/URLs in environment files
#
# 3. For production:
#    - Use AWS Secrets Manager for DB credentials
#    - Use SSM Parameter Store for configuration
#    - Enable VPC for Lambda functions accessing RDS
#
# 4. Security:
#    - Environment files (.env.dev, .env.staging, .env.prod) are git-ignored
#    - Never commit real credentials to version control
#    - Use IAM roles in AWS environments instead of access keys
