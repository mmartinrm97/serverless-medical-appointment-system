# =============================================================================
# MEDICAL APPOINTMENTS API - ENVIRONMENT CONFIGURATION
# =============================================================================
# Copy this file to .env and update the values for your environment
# For production, use AWS Systems Manager Parameter Store or AWS Secrets Manager

# =============================================================================
# STAGE & ENVIRONMENT CONFIGURATION
# =============================================================================
# Deployment stage (dev, staging, prod)
STAGE=dev

# Node.js environment (development, test, production)
NODE_ENV=development

# =============================================================================
# AWS CONFIGURATION
# =============================================================================
# For local development with LocalStack (default port 4566)
# For production: remove these and use IAM roles or AWS credentials
AWS_ENDPOINT_URL=http://localhost:4566
AWS_DEFAULT_REGION=us-east-1
AWS_REGION=us-east-1
AWS_ACCESS_KEY_ID=test
AWS_SECRET_ACCESS_KEY=test
AWS_ACCOUNT_ID=000000000000

# =============================================================================
# DYNAMODB CONFIGURATION
# =============================================================================
# DynamoDB table name for storing appointment requests
# Format: {service-name}-appointments-{stage}
APPOINTMENTS_TABLE=medical-appointments-api-appointments-dev

# =============================================================================
# SNS CONFIGURATION
# =============================================================================
# SNS topic ARN for publishing appointment notifications
# Used to send messages to country-specific SQS queues
SNS_TOPIC_ARN=arn:aws:sns:us-east-1:000000000000:medical-appointments-api-appointment-notifications-dev

# =============================================================================
# SQS CONFIGURATION
# =============================================================================
# SQS queue URLs for each country's appointment processing
# Peru (PE) queue - receives appointments for Peruvian medical centers
SQS_PE_URL=http://sqs.us-east-1.localhost.localstack.cloud:4566/000000000000/medical-appointments-api-appointment-pe-dev

# Chile (CL) queue - receives appointments for Chilean medical centers
SQS_CL_URL=http://sqs.us-east-1.localhost.localstack.cloud:4566/000000000000/medical-appointments-api-appointment-cl-dev

# Completion queue - receives appointment confirmation events from EventBridge
SQS_COMPLETION_URL=http://sqs.us-east-1.localhost.localstack.cloud:4566/000000000000/medical-appointments-api-appointment-completion-dev

# =============================================================================
# PERFORMANCE TUNING
# =============================================================================
# Default Lambda memory allocation in MB (128-10008)
DEFAULT_MEMORY=256

# Default Lambda timeout in seconds (1-900)
DEFAULT_TIMEOUT=30

# API Gateway response compression threshold in bytes
API_COMPRESSION=1024

# SQS message visibility timeout in seconds (0-43200)
SQS_VISIBILITY_TIMEOUT=360

# SQS completion queue timeout in seconds (optimized for completion processing)
SQS_COMPLETION_TIMEOUT=180

# SQS maximum receive count before sending to DLQ (1-1000)
SQS_MAX_RECEIVE=3

# SQS long polling wait time in seconds (0-20)
SQS_LONG_POLLING=20

# =============================================================================
# EVENTBRIDGE CONFIGURATION
# =============================================================================
# EventBridge bus name for appointment events
# Use 'default' for the default event bus, or custom bus name
EVENT_BUS_NAME=default

# =============================================================================
# MYSQL DATABASE CONFIGURATION (PERU)
# =============================================================================
# Peru MySQL database connection settings
# For local development with Docker containers
DB_HOST_PE=localhost
DB_PORT_PE=3307
DB_NAME_PE=appointments_pe
DB_USER_PE=appointments
DB_PASSWORD_PE=appointments123

# =============================================================================
# MYSQL DATABASE CONFIGURATION (CHILE)
# =============================================================================
# Chile MySQL database connection settings
# For local development with Docker containers
DB_HOST_CL=localhost
DB_PORT_CL=3308
DB_NAME_CL=appointments_cl
DB_USER_CL=appointments
DB_PASSWORD_CL=appointments123

# =============================================================================
# AWS SECRETS MANAGER
# =============================================================================
# ARNs for database credentials stored in AWS Secrets Manager
# For production, these secrets should contain actual RDS connection details
DB_SECRET_ARN_PE=arn:aws:secretsmanager:us-east-1:000000000000:secret:/medical-appointments/dev/rds/pe/credentials
DB_SECRET_ARN_CL=arn:aws:secretsmanager:us-east-1:000000000000:secret:/medical-appointments/dev/rds/cl/credentials

# =============================================================================
# VPC CONFIGURATION
# =============================================================================
# VPC subnet IDs for Lambda functions (comma-separated)
# Required when Lambda functions need to access RDS in private subnets
VPC_SUBNET_IDS=subnet-12345,subnet-67890

# Security group ID for Lambda functions in VPC
# Should allow outbound access to RDS and other required services
VPC_SECURITY_GROUP_ID=sg-12345678

# =============================================================================
# LOGGING CONFIGURATION
# =============================================================================
# Log level for application logging (debug, info, warn, error)
# Use 'debug' for development, 'info' or 'warn' for production
LOG_LEVEL=debug

# =============================================================================
# ADDITIONAL NOTES
# =============================================================================
# 1. For production deployment:
#    - Remove AWS_ENDPOINT_URL to use real AWS services
#    - Use IAM roles instead of AWS_ACCESS_KEY_ID/AWS_SECRET_ACCESS_KEY
#    - Store sensitive values in AWS Secrets Manager or SSM Parameter Store
#    - Update database hosts to actual RDS endpoints
#    - Use actual VPC subnet IDs and security group IDs
#
# 2. For testing:
#    - Copy this file to .env.test
#    - Update ports to avoid conflicts (e.g., 4567 for LocalStack, 3309/3310 for MySQL)
#    - Set NODE_ENV=test
#
# 3. Required AWS Services:
#    - DynamoDB (for appointment storage)
#    - SNS (for message publishing)
#    - SQS (for message queuing)
#    - EventBridge (for event routing)
#    - Secrets Manager (for database credentials)
#    - RDS MySQL (for country-specific appointment data)
